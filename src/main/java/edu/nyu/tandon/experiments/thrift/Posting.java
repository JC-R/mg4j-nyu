/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.nyu.tandon.experiments.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-02-02")
public class Posting implements org.apache.thrift.TBase<Posting, Posting._Fields>, java.io.Serializable, Cloneable, Comparable<Posting> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Posting");

  private static final org.apache.thrift.protocol.TField TERMID_FIELD_DESC = new org.apache.thrift.protocol.TField("termid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DOCID_FIELD_DESC = new org.apache.thrift.protocol.TField("docid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PostingStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PostingTupleSchemeFactory();

  public int termid; // required
  public long docid; // optional
  public double score; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TERMID((short)1, "termid"),
    DOCID((short)2, "docid"),
    SCORE((short)3, "score");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TERMID
          return TERMID;
        case 2: // DOCID
          return DOCID;
        case 3: // SCORE
          return SCORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TERMID_ISSET_ID = 0;
  private static final int __DOCID_ISSET_ID = 1;
  private static final int __SCORE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DOCID,_Fields.SCORE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TERMID, new org.apache.thrift.meta_data.FieldMetaData("termid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOCID, new org.apache.thrift.meta_data.FieldMetaData("docid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Posting.class, metaDataMap);
  }

  public Posting() {
  }

  public Posting(
    int termid)
  {
    this();
    this.termid = termid;
    setTermidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Posting(Posting other) {
    __isset_bitfield = other.__isset_bitfield;
    this.termid = other.termid;
    this.docid = other.docid;
    this.score = other.score;
  }

  public Posting deepCopy() {
    return new Posting(this);
  }

  @Override
  public void clear() {
    setTermidIsSet(false);
    this.termid = 0;
    setDocidIsSet(false);
    this.docid = 0;
    setScoreIsSet(false);
    this.score = 0.0;
  }

  public int getTermid() {
    return this.termid;
  }

  public Posting setTermid(int termid) {
    this.termid = termid;
    setTermidIsSet(true);
    return this;
  }

  public void unsetTermid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TERMID_ISSET_ID);
  }

  /** Returns true if field termid is set (has been assigned a value) and false otherwise */
  public boolean isSetTermid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TERMID_ISSET_ID);
  }

  public void setTermidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TERMID_ISSET_ID, value);
  }

  public long getDocid() {
    return this.docid;
  }

  public Posting setDocid(long docid) {
    this.docid = docid;
    setDocidIsSet(true);
    return this;
  }

  public void unsetDocid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOCID_ISSET_ID);
  }

  /** Returns true if field docid is set (has been assigned a value) and false otherwise */
  public boolean isSetDocid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOCID_ISSET_ID);
  }

  public void setDocidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOCID_ISSET_ID, value);
  }

  public double getScore() {
    return this.score;
  }

  public Posting setScore(double score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TERMID:
      if (value == null) {
        unsetTermid();
      } else {
        setTermid((java.lang.Integer)value);
      }
      break;

    case DOCID:
      if (value == null) {
        unsetDocid();
      } else {
        setDocid((java.lang.Long)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TERMID:
      return getTermid();

    case DOCID:
      return getDocid();

    case SCORE:
      return getScore();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TERMID:
      return isSetTermid();
    case DOCID:
      return isSetDocid();
    case SCORE:
      return isSetScore();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Posting)
      return this.equals((Posting)that);
    return false;
  }

  public boolean equals(Posting that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_termid = true;
    boolean that_present_termid = true;
    if (this_present_termid || that_present_termid) {
      if (!(this_present_termid && that_present_termid))
        return false;
      if (this.termid != that.termid)
        return false;
    }

    boolean this_present_docid = true && this.isSetDocid();
    boolean that_present_docid = true && that.isSetDocid();
    if (this_present_docid || that_present_docid) {
      if (!(this_present_docid && that_present_docid))
        return false;
      if (this.docid != that.docid)
        return false;
    }

    boolean this_present_score = true && this.isSetScore();
    boolean that_present_score = true && that.isSetScore();
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + termid;

    hashCode = hashCode * 8191 + ((isSetDocid()) ? 131071 : 524287);
    if (isSetDocid())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(docid);

    hashCode = hashCode * 8191 + ((isSetScore()) ? 131071 : 524287);
    if (isSetScore())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(score);

    return hashCode;
  }

  @Override
  public int compareTo(Posting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTermid()).compareTo(other.isSetTermid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTermid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.termid, other.termid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDocid()).compareTo(other.isSetDocid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docid, other.docid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Posting(");
    boolean first = true;

    sb.append("termid:");
    sb.append(this.termid);
    first = false;
    if (isSetDocid()) {
      if (!first) sb.append(", ");
      sb.append("docid:");
      sb.append(this.docid);
      first = false;
    }
    if (isSetScore()) {
      if (!first) sb.append(", ");
      sb.append("score:");
      sb.append(this.score);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'termid' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PostingStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PostingStandardScheme getScheme() {
      return new PostingStandardScheme();
    }
  }

  private static class PostingStandardScheme extends org.apache.thrift.scheme.StandardScheme<Posting> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Posting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TERMID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.termid = iprot.readI32();
              struct.setTermidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOCID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.docid = iprot.readI64();
              struct.setDocidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score = iprot.readDouble();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTermid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'termid' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Posting struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TERMID_FIELD_DESC);
      oprot.writeI32(struct.termid);
      oprot.writeFieldEnd();
      if (struct.isSetDocid()) {
        oprot.writeFieldBegin(DOCID_FIELD_DESC);
        oprot.writeI64(struct.docid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetScore()) {
        oprot.writeFieldBegin(SCORE_FIELD_DESC);
        oprot.writeDouble(struct.score);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PostingTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PostingTupleScheme getScheme() {
      return new PostingTupleScheme();
    }
  }

  private static class PostingTupleScheme extends org.apache.thrift.scheme.TupleScheme<Posting> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Posting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.termid);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDocid()) {
        optionals.set(0);
      }
      if (struct.isSetScore()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDocid()) {
        oprot.writeI64(struct.docid);
      }
      if (struct.isSetScore()) {
        oprot.writeDouble(struct.score);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Posting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.termid = iprot.readI32();
      struct.setTermidIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.docid = iprot.readI64();
        struct.setDocidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.score = iprot.readDouble();
        struct.setScoreIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

