/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.nyu.tandon.experiments.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-10")
public class Result implements org.apache.thrift.TBase<Result, Result._Fields>, java.io.Serializable, Cloneable, Comparable<Result> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Result");

  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DOCIDS_LOCAL_FIELD_DESC = new org.apache.thrift.protocol.TField("docids_local", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DOCIDS_GLOBAL_FIELD_DESC = new org.apache.thrift.protocol.TField("docids_global", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SCORES_FIELD_DESC = new org.apache.thrift.protocol.TField("scores", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField SHARD_FIELD_DESC = new org.apache.thrift.protocol.TField("shard", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BUCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("bucket", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResultTupleSchemeFactory();

  public int query; // required
  public java.util.List<java.lang.Long> docids_local; // optional
  public java.util.List<java.lang.Long> docids_global; // optional
  public java.util.List<java.lang.Double> scores; // optional
  public int shard; // optional
  public int bucket; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY((short)1, "query"),
    DOCIDS_LOCAL((short)2, "docids_local"),
    DOCIDS_GLOBAL((short)3, "docids_global"),
    SCORES((short)4, "scores"),
    SHARD((short)5, "shard"),
    BUCKET((short)6, "bucket");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // DOCIDS_LOCAL
          return DOCIDS_LOCAL;
        case 3: // DOCIDS_GLOBAL
          return DOCIDS_GLOBAL;
        case 4: // SCORES
          return SCORES;
        case 5: // SHARD
          return SHARD;
        case 6: // BUCKET
          return BUCKET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUERY_ISSET_ID = 0;
  private static final int __SHARD_ISSET_ID = 1;
  private static final int __BUCKET_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DOCIDS_LOCAL,_Fields.DOCIDS_GLOBAL,_Fields.SCORES,_Fields.SHARD,_Fields.BUCKET};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOCIDS_LOCAL, new org.apache.thrift.meta_data.FieldMetaData("docids_local", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOCIDS_GLOBAL, new org.apache.thrift.meta_data.FieldMetaData("docids_global", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.SCORES, new org.apache.thrift.meta_data.FieldMetaData("scores", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.SHARD, new org.apache.thrift.meta_data.FieldMetaData("shard", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUCKET, new org.apache.thrift.meta_data.FieldMetaData("bucket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Result.class, metaDataMap);
  }

  public Result() {
  }

  public Result(
    int query)
  {
    this();
    this.query = query;
    setQueryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Result(Result other) {
    __isset_bitfield = other.__isset_bitfield;
    this.query = other.query;
    if (other.isSetDocids_local()) {
      java.util.List<java.lang.Long> __this__docids_local = new java.util.ArrayList<java.lang.Long>(other.docids_local);
      this.docids_local = __this__docids_local;
    }
    if (other.isSetDocids_global()) {
      java.util.List<java.lang.Long> __this__docids_global = new java.util.ArrayList<java.lang.Long>(other.docids_global);
      this.docids_global = __this__docids_global;
    }
    if (other.isSetScores()) {
      java.util.List<java.lang.Double> __this__scores = new java.util.ArrayList<java.lang.Double>(other.scores);
      this.scores = __this__scores;
    }
    this.shard = other.shard;
    this.bucket = other.bucket;
  }

  public Result deepCopy() {
    return new Result(this);
  }

  @Override
  public void clear() {
    setQueryIsSet(false);
    this.query = 0;
    this.docids_local = null;
    this.docids_global = null;
    this.scores = null;
    setShardIsSet(false);
    this.shard = 0;
    setBucketIsSet(false);
    this.bucket = 0;
  }

  public int getQuery() {
    return this.query;
  }

  public Result setQuery(int query) {
    this.query = query;
    setQueryIsSet(true);
    return this;
  }

  public void unsetQuery() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERY_ISSET_ID);
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERY_ISSET_ID);
  }

  public void setQueryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERY_ISSET_ID, value);
  }

  public int getDocids_localSize() {
    return (this.docids_local == null) ? 0 : this.docids_local.size();
  }

  public java.util.Iterator<java.lang.Long> getDocids_localIterator() {
    return (this.docids_local == null) ? null : this.docids_local.iterator();
  }

  public void addToDocids_local(long elem) {
    if (this.docids_local == null) {
      this.docids_local = new java.util.ArrayList<java.lang.Long>();
    }
    this.docids_local.add(elem);
  }

  public java.util.List<java.lang.Long> getDocids_local() {
    return this.docids_local;
  }

  public Result setDocids_local(java.util.List<java.lang.Long> docids_local) {
    this.docids_local = docids_local;
    return this;
  }

  public void unsetDocids_local() {
    this.docids_local = null;
  }

  /** Returns true if field docids_local is set (has been assigned a value) and false otherwise */
  public boolean isSetDocids_local() {
    return this.docids_local != null;
  }

  public void setDocids_localIsSet(boolean value) {
    if (!value) {
      this.docids_local = null;
    }
  }

  public int getDocids_globalSize() {
    return (this.docids_global == null) ? 0 : this.docids_global.size();
  }

  public java.util.Iterator<java.lang.Long> getDocids_globalIterator() {
    return (this.docids_global == null) ? null : this.docids_global.iterator();
  }

  public void addToDocids_global(long elem) {
    if (this.docids_global == null) {
      this.docids_global = new java.util.ArrayList<java.lang.Long>();
    }
    this.docids_global.add(elem);
  }

  public java.util.List<java.lang.Long> getDocids_global() {
    return this.docids_global;
  }

  public Result setDocids_global(java.util.List<java.lang.Long> docids_global) {
    this.docids_global = docids_global;
    return this;
  }

  public void unsetDocids_global() {
    this.docids_global = null;
  }

  /** Returns true if field docids_global is set (has been assigned a value) and false otherwise */
  public boolean isSetDocids_global() {
    return this.docids_global != null;
  }

  public void setDocids_globalIsSet(boolean value) {
    if (!value) {
      this.docids_global = null;
    }
  }

  public int getScoresSize() {
    return (this.scores == null) ? 0 : this.scores.size();
  }

  public java.util.Iterator<java.lang.Double> getScoresIterator() {
    return (this.scores == null) ? null : this.scores.iterator();
  }

  public void addToScores(double elem) {
    if (this.scores == null) {
      this.scores = new java.util.ArrayList<java.lang.Double>();
    }
    this.scores.add(elem);
  }

  public java.util.List<java.lang.Double> getScores() {
    return this.scores;
  }

  public Result setScores(java.util.List<java.lang.Double> scores) {
    this.scores = scores;
    return this;
  }

  public void unsetScores() {
    this.scores = null;
  }

  /** Returns true if field scores is set (has been assigned a value) and false otherwise */
  public boolean isSetScores() {
    return this.scores != null;
  }

  public void setScoresIsSet(boolean value) {
    if (!value) {
      this.scores = null;
    }
  }

  public int getShard() {
    return this.shard;
  }

  public Result setShard(int shard) {
    this.shard = shard;
    setShardIsSet(true);
    return this;
  }

  public void unsetShard() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARD_ISSET_ID);
  }

  /** Returns true if field shard is set (has been assigned a value) and false otherwise */
  public boolean isSetShard() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARD_ISSET_ID);
  }

  public void setShardIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARD_ISSET_ID, value);
  }

  public int getBucket() {
    return this.bucket;
  }

  public Result setBucket(int bucket) {
    this.bucket = bucket;
    setBucketIsSet(true);
    return this;
  }

  public void unsetBucket() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUCKET_ISSET_ID);
  }

  /** Returns true if field bucket is set (has been assigned a value) and false otherwise */
  public boolean isSetBucket() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUCKET_ISSET_ID);
  }

  public void setBucketIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUCKET_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((java.lang.Integer)value);
      }
      break;

    case DOCIDS_LOCAL:
      if (value == null) {
        unsetDocids_local();
      } else {
        setDocids_local((java.util.List<java.lang.Long>)value);
      }
      break;

    case DOCIDS_GLOBAL:
      if (value == null) {
        unsetDocids_global();
      } else {
        setDocids_global((java.util.List<java.lang.Long>)value);
      }
      break;

    case SCORES:
      if (value == null) {
        unsetScores();
      } else {
        setScores((java.util.List<java.lang.Double>)value);
      }
      break;

    case SHARD:
      if (value == null) {
        unsetShard();
      } else {
        setShard((java.lang.Integer)value);
      }
      break;

    case BUCKET:
      if (value == null) {
        unsetBucket();
      } else {
        setBucket((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case DOCIDS_LOCAL:
      return getDocids_local();

    case DOCIDS_GLOBAL:
      return getDocids_global();

    case SCORES:
      return getScores();

    case SHARD:
      return getShard();

    case BUCKET:
      return getBucket();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case DOCIDS_LOCAL:
      return isSetDocids_local();
    case DOCIDS_GLOBAL:
      return isSetDocids_global();
    case SCORES:
      return isSetScores();
    case SHARD:
      return isSetShard();
    case BUCKET:
      return isSetBucket();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Result)
      return this.equals((Result)that);
    return false;
  }

  public boolean equals(Result that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_query = true;
    boolean that_present_query = true;
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (this.query != that.query)
        return false;
    }

    boolean this_present_docids_local = true && this.isSetDocids_local();
    boolean that_present_docids_local = true && that.isSetDocids_local();
    if (this_present_docids_local || that_present_docids_local) {
      if (!(this_present_docids_local && that_present_docids_local))
        return false;
      if (!this.docids_local.equals(that.docids_local))
        return false;
    }

    boolean this_present_docids_global = true && this.isSetDocids_global();
    boolean that_present_docids_global = true && that.isSetDocids_global();
    if (this_present_docids_global || that_present_docids_global) {
      if (!(this_present_docids_global && that_present_docids_global))
        return false;
      if (!this.docids_global.equals(that.docids_global))
        return false;
    }

    boolean this_present_scores = true && this.isSetScores();
    boolean that_present_scores = true && that.isSetScores();
    if (this_present_scores || that_present_scores) {
      if (!(this_present_scores && that_present_scores))
        return false;
      if (!this.scores.equals(that.scores))
        return false;
    }

    boolean this_present_shard = true && this.isSetShard();
    boolean that_present_shard = true && that.isSetShard();
    if (this_present_shard || that_present_shard) {
      if (!(this_present_shard && that_present_shard))
        return false;
      if (this.shard != that.shard)
        return false;
    }

    boolean this_present_bucket = true && this.isSetBucket();
    boolean that_present_bucket = true && that.isSetBucket();
    if (this_present_bucket || that_present_bucket) {
      if (!(this_present_bucket && that_present_bucket))
        return false;
      if (this.bucket != that.bucket)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + query;

    hashCode = hashCode * 8191 + ((isSetDocids_local()) ? 131071 : 524287);
    if (isSetDocids_local())
      hashCode = hashCode * 8191 + docids_local.hashCode();

    hashCode = hashCode * 8191 + ((isSetDocids_global()) ? 131071 : 524287);
    if (isSetDocids_global())
      hashCode = hashCode * 8191 + docids_global.hashCode();

    hashCode = hashCode * 8191 + ((isSetScores()) ? 131071 : 524287);
    if (isSetScores())
      hashCode = hashCode * 8191 + scores.hashCode();

    hashCode = hashCode * 8191 + ((isSetShard()) ? 131071 : 524287);
    if (isSetShard())
      hashCode = hashCode * 8191 + shard;

    hashCode = hashCode * 8191 + ((isSetBucket()) ? 131071 : 524287);
    if (isSetBucket())
      hashCode = hashCode * 8191 + bucket;

    return hashCode;
  }

  @Override
  public int compareTo(Result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDocids_local()).compareTo(other.isSetDocids_local());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocids_local()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docids_local, other.docids_local);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDocids_global()).compareTo(other.isSetDocids_global());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocids_global()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docids_global, other.docids_global);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScores()).compareTo(other.isSetScores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scores, other.scores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShard()).compareTo(other.isSetShard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shard, other.shard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBucket()).compareTo(other.isSetBucket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucket, other.bucket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Result(");
    boolean first = true;

    sb.append("query:");
    sb.append(this.query);
    first = false;
    if (isSetDocids_local()) {
      if (!first) sb.append(", ");
      sb.append("docids_local:");
      if (this.docids_local == null) {
        sb.append("null");
      } else {
        sb.append(this.docids_local);
      }
      first = false;
    }
    if (isSetDocids_global()) {
      if (!first) sb.append(", ");
      sb.append("docids_global:");
      if (this.docids_global == null) {
        sb.append("null");
      } else {
        sb.append(this.docids_global);
      }
      first = false;
    }
    if (isSetScores()) {
      if (!first) sb.append(", ");
      sb.append("scores:");
      if (this.scores == null) {
        sb.append("null");
      } else {
        sb.append(this.scores);
      }
      first = false;
    }
    if (isSetShard()) {
      if (!first) sb.append(", ");
      sb.append("shard:");
      sb.append(this.shard);
      first = false;
    }
    if (isSetBucket()) {
      if (!first) sb.append(", ");
      sb.append("bucket:");
      sb.append(this.bucket);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'query' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResultStandardScheme getScheme() {
      return new ResultStandardScheme();
    }
  }

  private static class ResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Result> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Result struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.query = iprot.readI32();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOCIDS_LOCAL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.docids_local = new java.util.ArrayList<java.lang.Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.docids_local.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDocids_localIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOCIDS_GLOBAL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.docids_global = new java.util.ArrayList<java.lang.Long>(_list3.size);
                long _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI64();
                  struct.docids_global.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setDocids_globalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCORES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.scores = new java.util.ArrayList<java.lang.Double>(_list6.size);
                double _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readDouble();
                  struct.scores.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setScoresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHARD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shard = iprot.readI32();
              struct.setShardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BUCKET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bucket = iprot.readI32();
              struct.setBucketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetQuery()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Result struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(QUERY_FIELD_DESC);
      oprot.writeI32(struct.query);
      oprot.writeFieldEnd();
      if (struct.docids_local != null) {
        if (struct.isSetDocids_local()) {
          oprot.writeFieldBegin(DOCIDS_LOCAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.docids_local.size()));
            for (long _iter9 : struct.docids_local)
            {
              oprot.writeI64(_iter9);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.docids_global != null) {
        if (struct.isSetDocids_global()) {
          oprot.writeFieldBegin(DOCIDS_GLOBAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.docids_global.size()));
            for (long _iter10 : struct.docids_global)
            {
              oprot.writeI64(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.scores != null) {
        if (struct.isSetScores()) {
          oprot.writeFieldBegin(SCORES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.scores.size()));
            for (double _iter11 : struct.scores)
            {
              oprot.writeDouble(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetShard()) {
        oprot.writeFieldBegin(SHARD_FIELD_DESC);
        oprot.writeI32(struct.shard);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBucket()) {
        oprot.writeFieldBegin(BUCKET_FIELD_DESC);
        oprot.writeI32(struct.bucket);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResultTupleScheme getScheme() {
      return new ResultTupleScheme();
    }
  }

  private static class ResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Result> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Result struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.query);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDocids_local()) {
        optionals.set(0);
      }
      if (struct.isSetDocids_global()) {
        optionals.set(1);
      }
      if (struct.isSetScores()) {
        optionals.set(2);
      }
      if (struct.isSetShard()) {
        optionals.set(3);
      }
      if (struct.isSetBucket()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDocids_local()) {
        {
          oprot.writeI32(struct.docids_local.size());
          for (long _iter12 : struct.docids_local)
          {
            oprot.writeI64(_iter12);
          }
        }
      }
      if (struct.isSetDocids_global()) {
        {
          oprot.writeI32(struct.docids_global.size());
          for (long _iter13 : struct.docids_global)
          {
            oprot.writeI64(_iter13);
          }
        }
      }
      if (struct.isSetScores()) {
        {
          oprot.writeI32(struct.scores.size());
          for (double _iter14 : struct.scores)
          {
            oprot.writeDouble(_iter14);
          }
        }
      }
      if (struct.isSetShard()) {
        oprot.writeI32(struct.shard);
      }
      if (struct.isSetBucket()) {
        oprot.writeI32(struct.bucket);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Result struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.query = iprot.readI32();
      struct.setQueryIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.docids_local = new java.util.ArrayList<java.lang.Long>(_list15.size);
          long _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readI64();
            struct.docids_local.add(_elem16);
          }
        }
        struct.setDocids_localIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.docids_global = new java.util.ArrayList<java.lang.Long>(_list18.size);
          long _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readI64();
            struct.docids_global.add(_elem19);
          }
        }
        struct.setDocids_globalIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.scores = new java.util.ArrayList<java.lang.Double>(_list21.size);
          double _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readDouble();
            struct.scores.add(_elem22);
          }
        }
        struct.setScoresIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shard = iprot.readI32();
        struct.setShardIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bucket = iprot.readI32();
        struct.setBucketIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

